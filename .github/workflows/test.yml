# GitHub Actions workflow for testing Hybrid RAG AI Platform
# Runs comprehensive test suite on multiple Python versions and environments

name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Code quality and linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r tests/test_requirements.txt

      - name: Run Black formatting check
        run: black --check --diff src/ tests/

      - name: Run isort import sorting check
        run: isort --check-only --diff src/ tests/

      - name: Run flake8 linting
        run: flake8 src/ tests/

      - name: Run mypy type checking
        run: mypy src/

      - name: Run bandit security linting
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload bandit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # Security testing
  security:
    name: Security Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit semgrep

      - name: Run safety check for vulnerabilities
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run semgrep security analysis
        run: semgrep --config=auto --json --output=semgrep-report.json src/
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            semgrep-report.json

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r tests/test_requirements.txt

      - name: Run unit tests
        run: |
          python tests/run_tests.py unit --fast --coverage --parallel
        env:
          USE_FAST_TESTS: true
          TESTING: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == env.PYTHON_VERSION
        with:
          file: ./coverage.xml
          flags: unit-tests
          name: unit-tests-coverage

  # Integration tests with database
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_DB: test_rag_platform
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7.2-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      qdrant:
        image: qdrant/qdrant:v1.6.1
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r tests/test_requirements.txt

      - name: Wait for services
        run: |
          sleep 10
          curl -f http://localhost:6333/health || exit 1

      - name: Run database migrations
        run: |
          alembic upgrade head
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_pass@localhost:5432/test_rag_platform

      - name: Run integration tests
        run: |
          python tests/run_tests.py integration --coverage
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_pass@localhost:5432/test_rag_platform
          REDIS_URL: redis://localhost:6379/0
          QDRANT_URL: http://localhost:6333
          TESTING: true
          USE_FAST_TESTS: false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: integration-tests
          name: integration-tests-coverage

  # End-to-end tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r tests/test_requirements.txt

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Start test environment with Docker
        run: |
          docker-compose -f docker-compose.test.yml up -d --wait
          sleep 30  # Wait for all services to be ready

      - name: Run database migrations
        run: |
          docker-compose -f docker-compose.test.yml exec -T app-test alembic upgrade head

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Start frontend server
        run: |
          cd frontend
          npm start &
          sleep 10

      - name: Run E2E tests
        run: |
          python tests/run_tests.py e2e
        env:
          E2E_BASE_URL: http://localhost:3000
          API_BASE_URL: http://localhost:8001

      - name: Collect Docker logs
        if: failure()
        run: |
          docker-compose -f docker-compose.test.yml logs > docker-logs.txt

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-artifacts
          path: |
            test-report.html
            test-report.json
            docker-logs.txt
            screenshots/

      - name: Cleanup test environment
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[performance]')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r tests/test_requirements.txt

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d --wait
          sleep 30

      - name: Run performance tests
        run: |
          python tests/run_tests.py performance
        env:
          PERFORMANCE_TESTING: true

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-reports
          path: |
            performance-report.html
            benchmark-results.json

  # Frontend tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint

      - name: Run TypeScript check
        run: |
          cd frontend
          npm run type-check

      - name: Run unit tests
        run: |
          cd frontend
          npm run test:unit

      - name: Run component tests
        run: |
          cd frontend
          npm run test:components

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/.next/

  # Accessibility tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run accessibility tests
        run: |
          cd frontend
          npm run test:a11y

      - name: Upload accessibility report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-report
          path: frontend/accessibility-report.html

  # Build and test Docker images
  docker-tests:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: test
          load: true
          tags: rag-platform:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: rag-platform:test
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Dependency updates and security
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk security check
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=requirements.txt

      - name: Run npm audit
        run: |
          cd frontend
          npm audit --audit-level=high

  # Test report aggregation
  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, frontend-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate combined test report
        run: |
          echo "# Test Results Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## Test Status" >> test-summary.md
          echo "- Linting: ${{ needs.lint.result }}" >> test-summary.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-summary.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-summary.md
          echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> test-summary.md

      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

# Workflow configuration
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true